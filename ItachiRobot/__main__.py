import importlib
import re
import time
import asyncio
from platform import python_version as y
from sys import argv
from pyrogram import __version__ as pyrover
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram import __version__ as telever
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop
from telegram.utils.helpers import escape_markdown
from telethon import __version__ as tlhver

import ItachiRobot.modules.no_sql.users_db as sql
from ItachiRobot import (
    BOT_NAME,
    BOT_USERNAME,
    LOGGER,
    OWNER_ID,
    START_IMG,
    SUPPORT_CHAT,
    TOKEN,
    StartTime,
    dispatcher,
    pbot,
    telethn,
    updater,
)
from ItachiRobot.modules import ALL_MODULES
from ItachiRobot.modules.helper_funcs.chat_status import is_user_admin
from ItachiRobot.modules.helper_funcs.misc import paginate_modules


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time
PM_START_TEX = "‚ú® * ú·¥á ü ü·¥è* `{}` . . ."


PM_START_TEXT = """ 
* ú·¥á è* {} , ü•Ä
*‡πè …™'·¥ç {} ·¥Ä ·¥Ä…¥…™·¥ç·¥á …™·¥ç·¥ò·¥Ä·¥Ñ·¥õ ·¥õ ú·¥á·¥ç·¥á·¥Ö  Ä·¥è ô·¥è·¥õ ·¥° ú…™·¥Ñ ú ·¥Ñ·¥Ä…¥  ú·¥á ü·¥ò  è·¥è·¥ú ·¥õ·¥è ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥Ä…¥·¥Ö Íú±·¥á·¥Ñ·¥ú Ä·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥°…™·¥õ ú  ú·¥ú…¢·¥á …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ.*
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
   *‚ûª ·¥ús·¥á Äs ¬ª* {}
   *‚ûª ·¥Ñ ú·¥Ä·¥õs ¬ª* {}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""

buttons = [
    
    [
        InlineKeyboardButton(
            text="üå∫‚Ä¢‚îÄ‚ïº‚Éùñ†ÅùêÄùô≥ùô≥ ‚óà ùêåùô¥ ‚óà ùêÅùô∞ùô±ùöàñ†Å‚Éù‚ïæ‚îÄ‚Ä¢üå∫",
            url=f"https://t.me/{dispatcher.bot.username}?startgroup=true",
        ),
    ],
    [
        InlineKeyboardButton(text="üìö  ú·¥á ü·¥ò ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="Main_help"),
    ],
    

]

HELP_STRINGS = f"""
¬ª *{BOT_NAME}  ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ ·¥Ö·¥ás·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ s·¥ò·¥á·¥Ñ…™“ì…™·¥Ñs ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö*"""

DONATE_STRING = f""" ú·¥á è  ô·¥Ä ô è,
   ú·¥Ä·¥©·¥© è ·¥õ·¥è  ú·¥á·¥Ä Ä ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä ·¥Ö·¥è…¥·¥Ä·¥õ·¥á.

 è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä @iam\_rudra “ì·¥è Ä ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ ·¥è Ä  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥†…™s…™·¥õ ·¥ç è s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ @ALLTYPECC ·¥Ä…¥·¥Ö ·¥Äs·¥ã ·¥õ ú·¥á Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥."""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
DATA_IMPORT = []
DATA_EXPORT = []
CHAT_SETTINGS = {}
USER_SETTINGS = {}

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("ItachiRobot.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if imported_module.__mod_name__.lower() not in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("Can't have two modules with the same name! Please change one")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_photo(
        chat_id=chat_id,
        photo=START_IMG,
        caption=text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard,
    )

def start(update: Update, context: CallbackContext):
    args = context.args
    global uptime
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="‚óÅ", callback_data="help_back")]]
                    ),
                )
            elif args[0].lower() == "markdownhelp":
                IMPORTED["ex·¥õ Ä·¥Äs"].markdown_help_sender(update)
            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "r·¥ú ü·¥ás" in IMPORTED:
                IMPORTED["r·¥ú ü·¥ás"].send_rules(update, args[0], from_pm=True)

        else:
            first_name = update.effective_user.first_name

            x=update.effective_message.reply_sticker(
                "CAACAgUAAxkBAAI33mLYLNLilbRI-sKAAob0P7koTEJNAAIOBAACl42QVKnra4sdzC_uKQQ")
            time.sleep(0.1)
            x.delete() 
            usr = update.effective_user
            lol = update.effective_message.reply_text(
                PM_START_TEX.format(usr.first_name), parse_mode=ParseMode.MARKDOWN
            )
            time.sleep(0.1)
            lol.edit_text("‚ù§")
            time.sleep(0.1)
            lol.edit_text("‚ö°")
            time.sleep(0.1)
            lol.edit_text(" ü·¥è·¥Ä·¥Ö…™…¥…¢25%... ")
            time.sleep(0.1)
            lol.edit_text(" ü·¥è·¥Ä·¥Ö…™…¥…¢50%... ")          
            time.sleep(0.1)  
            lol.edit_text(" ü·¥è·¥Ä·¥Ö…™…¥…¢75%... ")
            time.sleep(0.1)
            lol.edit_text(" ü·¥è·¥Ä·¥Ö…™…¥…¢100%... ")           
            time.sleep(0.3)
            lol.delete()

            update.effective_message.reply_photo(START_IMG,PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
            )
    else:
        update.effective_message.reply_photo(
            START_IMG,
            caption="…™ ·¥Ä·¥ç ·¥Ä ü…™·¥†·¥á  ô·¥Ä ô è  !\n<b>…™ ·¥Ö…™·¥Ö…¥'·¥õ s ü·¥á·¥ò·¥õ s…™…¥·¥Ñ·¥á:</b> <code>{}</code>".format(
                uptime
            ),
            parse_mode=ParseMode.HTML,
        )


def error_handler(update, context):
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "An exception was raised while handling an update\n"
        "<pre>update = {}</pre>\n\n"
        "<pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)

    print(query.message.chat.id)

    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                "¬ª *·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös Íú∞·¥è Ä* *{}* :\n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_caption(text,
                parse_mode=ParseMode.MARKDOWN,

                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help_back"),InlineKeyboardButton(text="s·¥ú·¥ò·¥ò·¥è Ä·¥õ", callback_data="rudrasupport")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_caption(HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()

    except BadRequest:
        pass


def rudraabout_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "rudra":
        uptime = get_readable_time((time.time() - StartTime))
        query.message.edit_caption(f"* ú·¥á è,*ü•Ä\n  *·¥õ ú…™s …™s {dispatcher.bot.first_name}*"
            "\n*·¥Ä ·¥ò·¥è·¥°·¥á ÄÍú∞·¥ú ü …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ ‚ûï ·¥ç·¥ús…™·¥Ñ ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥ú…™ ü·¥õ ·¥õ·¥è  ú·¥á ü·¥ò  è·¥è·¥ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥á·¥ÄÍú±…™ ü è ·¥Ä…¥·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò Íú∞ Ä·¥è·¥ç Íú±·¥Ñ·¥Ä·¥ç·¥ç·¥á ÄÍú± ·¥Ä…¥·¥Ö Íú±·¥ò·¥Ä·¥ç·¥ç·¥á ÄÍú±.*""\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            f"\n*‚ûª ·¥ú·¥©·¥õ…™·¥ç·¥á ¬ª* {uptime}"
            f"\n*‚ûª ·¥ús·¥á Äs ¬ª* {sql.num_users()}"
            f"\n*‚ûª ·¥Ñ ú·¥Ä·¥õs ¬ª* {sql.num_chats()}"
            "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            f"\n\n‚ûª ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° “ì·¥è Ä …¢·¥á·¥õ·¥õ…™…¥…¢  ô·¥Äs…™·¥Ñ  ú·¥á ü·¥© ·¥Ä…¥·¥Ö …™…¥“ì·¥è ·¥Ä ô·¥è·¥ú·¥õ {dispatcher.bot.first_name}.",
            parse_mode=ParseMode.MARKDOWN,

            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="üö©s·¥ú·¥©·¥©·¥è Ä·¥õ", callback_data="rudrasupport"
                        ),
                        InlineKeyboardButton(
                            text="·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös üíÅ", callback_data="Main_help"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="üë®‚Äçüíª·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä", url=f"tg://user?id={OWNER_ID}"
                        ),
                        InlineKeyboardButton(
                            text="ü•Äs·¥è·¥ú Ä·¥Ñ·¥á",
                            callback_data="source_",
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ", callback_data="rudraback"),
                    ],
                ]
            ),
        )
    elif query.data == "rudrasupport":
        query.message.edit_caption("**‡πè ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥© ·¥Ä…¥·¥Ö ·¥ç·¥è Ä·¥á …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä**"
            f"\n\n…™“ì  è·¥è·¥ú “ì·¥è·¥ú…¥·¥Ö ·¥Ä…¥ è  ô·¥ú…¢ …™…¥ {dispatcher.bot.first_name} ·¥è Ä …™“ì  è·¥è·¥ú ·¥°·¥Ä…¥…¥·¥Ä …¢…™·¥†·¥á “ì·¥á·¥á·¥Ö ô·¥Ä·¥Ñ·¥ã ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á {dispatcher.bot.first_name}, ·¥© ü·¥á·¥Äs·¥á  Ä·¥á·¥©·¥è Ä·¥õ …™·¥õ ·¥Ä·¥õ s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="üè° s·¥ú·¥©·¥©·¥è Ä·¥õ", url=f"https://t.me/{SUPPORT_CHAT}"
                        ),
                        InlineKeyboardButton(
                            text="·¥ú·¥©·¥Ö·¥Ä·¥õ·¥ás üç∑", url=f"https://t.me/warzone_123"
                        ),
                    ],
                    [
                        InlineKeyboardButton(
                            text="ü•Ä ·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä", url=f"tg://user?id={OWNER_ID}"
                        ),
                        InlineKeyboardButton(
                            text="…¢…™·¥õ ú·¥ú ô üçπ", url=f"https://github.com/rudraTEAM"
                        ),
                    ],
                    [
                        InlineKeyboardButton(text="‚óÅ", callback_data="rudra"),
                    ],
                ]
            ),
        )
    elif query.data == "rudraback":
        first_name = update.effective_user.first_name 
        query.message.edit_caption(PM_START_TEXT.format(escape_markdown(first_name), BOT_NAME,sql.num_users(),sql.num_chats()),
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
        )
def ItachiRobot_Main_Callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "Main_help":
        query.message.edit_caption(f"""
  ú·¥á Ä·¥á …™Íú±  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú Íú∞·¥è Ä {BOT_NAME}
""",
            parse_mode=ParseMode.MARKDOWN,

            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="üìï M·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ", callback_data="help_back"),
                        InlineKeyboardButton(text="M·¥ús…™·¥Ñ üéß", callback_data="Music_")
                    ],
                    [InlineKeyboardButton(text="‚Ä¢ B·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="rudraback")]
                ]
            ),
        )
    elif query.data=="basic_help":
        query.message.edit_caption("""üõ†Ô∏è CC C ú·¥á·¥Ñ·¥ã·¥á Ä T·¥è·¥è üs üõ†Ô∏è
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚îúùëºùíîùíÜùíìùíî ùë∞ùíèùíáùíê ¬ª /id
‚îúùëºùíîùíÇùíàùíÜ ¬ª /id

‚îúùë∞ùíë ùë≥ùíêùíêùíåùíñùíë ¬ª /ip
‚îúùëºùíîùíÇùíàùíÜ ¬ª/ip 1.1.1.1

‚îúùë©ùíäùíè ùë≥ùíêùíêùíåùíñùíë ¬ª /bin
‚îúùëºùíîùíÇùíàùíÜ ¬ª /bin 601120 

‚îúùë™ùë™ ùëÆùíÜùíèùíÜùíìùíÇùíïùíÜ  ¬ª /gen
‚îúùëºùíîùíÇùíàùíÜ ¬ª /gen 601120xxx|xx|xx|xxx

‚îúCredits Check  ¬ª /credits 
‚îúùëºùíîùíÇùíàùíÜ ¬ª /credits Check 

‚îúùë≠ùíÇùíåùíÜ ùë®ùíÖùíÖùíìùíÜùíîùíî ¬ª /fake
‚îúùëºùíîùíÇùíàùíÜ ¬ª /fake us

‚îúùë∫ùë≤ ùë™ùíâùíÜùíÑùíåùíÜùíì ¬ª /sk
‚îúùëºùíîùíÇùíàùíÜ ¬ª /sk sk_live_
 
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù.""",parse_mode=ParseMode.MARKDOWN,

            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="rudrasupport")
                    ]
                ]
            ),
            )
    elif query.data=="rudraback":
        query.message.edit_caption("""Ex·¥ò·¥á Ä·¥õ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös

üë• A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è ·¥Ä ü ü ·¥ús·¥á Äs
üëÆüèª A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s & M·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Äs.
üïµüèª A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s

üïµüèª  /unbanall ·¥ç·¥á·¥ç ô·¥á Äs “ì Ä·¥è·¥ç  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs
üëÆüèª  /unmuteall ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ä ü ü ·¥Ä ü ü “ì Ä·¥è·¥ç Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò

P…™…¥…¥·¥á·¥Ö M·¥áss·¥Ä…¢·¥ás
üïµüèª  /pin [·¥ç·¥áss·¥Ä…¢·¥á] s·¥á…¥·¥Ös ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ ú Ä·¥è·¥ú…¢ ú ·¥õ ú·¥á B·¥è·¥õ ·¥Ä…¥·¥Ö ·¥ò…™…¥s …™·¥õ.
üïµüèª  /pin ·¥ò…™…¥s ·¥õ ú·¥á ·¥ç·¥áss·¥Ä…¢·¥á …™…¥  Ä·¥á·¥ò ü è
üïµüèª  /unpin  Ä·¥á·¥ç·¥è·¥†·¥ás ·¥õ ú·¥á ·¥ò…™…¥…¥·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á.
üïµüèª  /adminlist  ü…™s·¥õ ·¥è“ì ·¥Ä ü ü ·¥õ ú·¥á s·¥ò·¥á·¥Ñ…™·¥Ä ü  Ä·¥è ü·¥ás ·¥Äss…™…¢…¥·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á Äs.

‚óΩÔ∏è /bug: (·¥ç·¥áss·¥Ä…¢·¥á) ·¥õ·¥è S·¥á…¥·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á ·¥Ä…¥·¥Ö ·¥á Ä Ä·¥è Äs ·¥° ú…™·¥Ñ ú  è·¥è·¥ú ·¥Ä Ä·¥á “ì·¥Ä·¥Ñ…™…¥…¢ 
·¥áx: /bug H·¥á è T ú·¥á Ä·¥á Is ·¥Ä S·¥è·¥ç·¥á·¥õ ú…™…¥…¢ E Ä Ä·¥è Ä @username ·¥è“ì ·¥Ñ ú·¥Ä·¥õ! .""",parse_mode=ParseMode.MARKDOWN,

            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="rudrasupport")
                    ]
                ]
            ),
            )                                        
    elif query.data=="advance_help":
        query.message.edit_caption("""A·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös

üëÆüèªA·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s & M·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è Äs.
üïµüèªA·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s.
üõÉ A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥õ·¥è A·¥Ö·¥ç…™…¥s & C ü·¥á·¥Ä…¥·¥á Äs

W·¥Ä Ä…¥ M·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ
üëÆüèª  /warn ·¥Ä·¥Ö·¥Ös ·¥Ä ·¥°·¥Ä Ä…¥ ·¥õ·¥è ·¥õ ú·¥á ·¥ús·¥á Ä
üëÆüèª  /unwarn  Ä·¥á·¥ç·¥è·¥†·¥ás ·¥Ä ·¥°·¥Ä Ä…¥ ·¥õ·¥è ·¥õ ú·¥á ·¥ús·¥á Ä
üëÆüèª  /warns  ü·¥á·¥õs  è·¥è·¥ú s·¥á·¥á ·¥Ä…¥·¥Ö ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥ús·¥á Ä ·¥°·¥Ä Ä…¥s

üõÉ  /del ·¥Ö·¥á ü·¥á·¥õ·¥ás ·¥õ ú·¥á s·¥á ü·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á
üõÉ  /purge ·¥Ö·¥á ü·¥á·¥õ·¥ás “ì Ä·¥è·¥ç ·¥õ ú·¥á s·¥á ü·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á.""",parse_mode=ParseMode.MARKDOWN,

            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="rudrasupport")
                    ]
                ]
            ),
            )
    elif query.data=="expert_help":
        query.message.edit_caption(f"""‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
·¥ç·¥Ä·¥ã·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥áÍú∞Íú∞·¥á·¥Ñ·¥õ…™·¥†·¥á …¥·¥è·¥° :
üéâ ·¥Ñ·¥è…¥…¢ Ä·¥Ä…¢·¥ú ü·¥Ä·¥õ…™·¥è…¥Íú± üéâ
[{BOT_NAME}]("https://t.me/{BOT_USERNAME}") …¥·¥è·¥°  Ä·¥á·¥Ä·¥Ö è ·¥õ·¥è
·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.

·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è·¥è üÍú± :
 ô·¥ÄÍú±…™·¥Ñ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è·¥è üÍú±  ú·¥á ü·¥ò  è·¥è·¥ú ·¥õ·¥è
·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ & ·¥ò·¥è·¥°·¥á Ä·¥ú·¥ò  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.
 è·¥è·¥ú ·¥Ñ·¥Ä…¥  ô·¥Ä…¥, ·¥ã…™·¥Ñ·¥ã, ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á
·¥ç·¥á·¥ç ô·¥á ÄÍú± ·¥ÄÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ ú Ä·¥è·¥ú…¢ ú  ô·¥è·¥õ.

…¢ Ä·¥á·¥á·¥õ…™…¥…¢Íú± :
 ü·¥á·¥õÍú± Íú±·¥á·¥õ ·¥Ä ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥õ·¥è
·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á …¥·¥á·¥° ·¥úÍú±·¥á ÄÍú± ·¥Ñ·¥è·¥ç…™…¥…¢ ·¥õ·¥è
 è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.
Íú±·¥á…¥·¥Ö /setwelcome ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥õ·¥è
Íú±·¥á·¥õ ·¥Ä ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á!""",parse_mode=ParseMode.MARKDOWN,

            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="‚Ä¢  ô·¥Ä·¥Ñ·¥ã ‚Ä¢", callback_data="Main_help"),InlineKeyboardButton(text="‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", callback_data="rudrasupport")
                    ]
                ]
            ),
            )
    elif query.data=="donation_help":
        query.message.edit_caption("""A Ä·¥á  è·¥è·¥ú …™…¥·¥õ·¥á Ä·¥ás·¥õ·¥á·¥Ö …™…¥  ú·¥á ü·¥ò…™…¥…¢ ·¥ç è ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä ·¥°…™·¥õ ú  ú…™s ·¥á“ì“ì·¥è Ä·¥õs ·¥õ·¥è ·¥ã·¥á·¥á·¥ò ·¥ç·¥á …™…¥ ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥ç·¥á…¥·¥õ? I“ì  è·¥ás, Y·¥è·¥ú' Ä·¥á …™…¥ ·¥õ ú·¥á  Ä…™…¢ ú·¥õ ·¥ò ü·¥Ä·¥Ñ·¥á. 

W·¥á ·¥á·¥ç·¥ò ú·¥Äs…™s·¥á ·¥õ ú·¥á …™·¥ç·¥ò·¥è Ä·¥õ·¥Ä…¥·¥Ñ·¥á ·¥è“ì …¥·¥á·¥á·¥Ö…™…¥…¢ “ì·¥ú…¥·¥Ös ·¥õ·¥è ·¥ã·¥á·¥á·¥ò Y·¥ú·¥ç…™·¥ã·¥è·¥èR·¥è ô·¥è·¥õ ·¥ú…¥·¥Ö·¥á Ä ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥ç·¥á…¥·¥õ. Y·¥è·¥ú Ä ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥s …™…¥ ·¥Ä…¥ è ·¥Ä·¥ç·¥è·¥ú…¥·¥õ ·¥è“ì ·¥ç·¥è…¥·¥á è ·¥õ·¥è Y·¥ú·¥ç…™·¥ã·¥è·¥èR·¥è ô·¥è·¥õ s·¥á Ä·¥†·¥á Äs ·¥Ä…¥·¥Ö ·¥è·¥õ ú·¥á Ä ·¥ú·¥õ…™ ü…™·¥õ…™·¥ás ·¥°…™ ü ü ·¥Ä ü ü·¥è·¥° ·¥ús ·¥õ·¥è s·¥ús·¥õ·¥Ä…™…¥ ·¥õ ú·¥á  ü…™“ì·¥ás·¥ò·¥Ä…¥ …™…¥ ·¥õ ú·¥á  ü·¥è…¥…¢ ·¥õ·¥á Ä·¥ç. W·¥á ·¥°…™ ü ü ·¥ús·¥á ·¥Ä ü ü ·¥è“ì ·¥õ ú·¥á ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥s ·¥õ·¥è ·¥Ñ·¥è·¥†·¥á Ä “ì·¥ú·¥õ·¥ú Ä·¥á ·¥áx·¥ò·¥á…¥s·¥ás ·¥Ä…¥·¥Ö ·¥ú·¥ò…¢ Ä·¥Ä·¥Ö·¥ás ·¥è“ì ·¥õ ú·¥á s·¥á Ä·¥†·¥á Äs ·¥Ñ·¥ès·¥õs. I“ì  è·¥è·¥ú'·¥†·¥á …¢·¥è·¥õ s·¥ò·¥Ä Ä·¥á ·¥ç·¥è…¥·¥á è ·¥õ·¥è  ú·¥á ü·¥ò ·¥ús …™…¥ ·¥õ ú…™s ·¥á“ì“ì·¥è Ä·¥õ, K…™…¥·¥Ö ü è ·¥Ö·¥è s·¥è ·¥Ä…¥·¥Ö  è·¥è·¥ú Ä ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥s ·¥Ñ·¥Ä…¥ ·¥Ä üs·¥è ·¥ç·¥è·¥õ…™·¥†·¥Ä·¥õ·¥á ·¥ús ·¥ã·¥á·¥á·¥ò  ô Ä…™…¥…¢ ·¥è…¥ …¥·¥á·¥° “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás.

Y·¥è·¥ú ·¥Ñ·¥Ä…¥  ú·¥á ü·¥ò ·¥õ ú·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥ç·¥á…¥·¥õ ·¥°…™·¥õ ú ·¥Ö·¥è…¥·¥Ä·¥õ…™·¥è…¥s""",parse_mode=ParseMode.MARKDOWN,

            rep